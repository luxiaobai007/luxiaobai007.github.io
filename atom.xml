<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-04T03:35:04.791Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/10/04/hello-world/"/>
    <id>http://example.com/2021/10/04/hello-world/</id>
    <published>2021-10-04T03:35:04.791Z</published>
    <updated>2021-10-04T03:35:04.791Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/08/31/nginx/"/>
    <id>http://example.com/2021/08/31/nginx/</id>
    <published>2021-08-31T08:37:31.961Z</published>
    <updated>2021-10-06T08:46:42.382Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Nginx全面了解如何配置</p><hr><p>[toc]</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>Nginx是一个高性能的HTTP和反向代理Web服务器.同时也提供了IMAP/POP3/SMTP服务.占有内存少、并发能力强。</p><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a><strong>正向代理</strong></h3><p>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问</p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a><strong>反向代理</strong></h3><p>客户端对代理是无感知的，不需要任何配置就可以访问。只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>并发请求时，将请求分发到多个服务器上，将负载分发到不同的服务器</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>为加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。 </p><h1 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h1><h2 id="第一部分-全局块"><a href="#第一部分-全局块" class="headerlink" title="第一部分: 全局块"></a>第一部分: 全局块</h2><p>从配置文件开始到events块之间的内容，主要会设置一些影响Nginx服务器整体运行的配置指令，主要包括：配置运行Nginx服务器的用户（组）、运行生成的worker process数、进程PID存放路径、日志存放路径和类型以及配置文件的引入等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>; <span class="comment">##worker_processes值越大，可以支持的并发处理量也越多</span></span><br></pre></td></tr></table></figure><h2 id="第二部分-events"><a href="#第二部分-events" class="headerlink" title="第二部分: events"></a>第二部分: events</h2><p>主要影响Nginx服务器与用户的网络连接，常用设置包括是否开启对多workprocess下的网络连接进行序列化，是否允许同时接收多个网络连接，选取那种事件驱动模型来处理连接请求，每个word process可以同时支持的最大连接数等。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"><span class="attribute">worker_connections</span> <span class="number">768</span>; <span class="comment">##支持的最大连接数</span></span><br><span class="line"><span class="comment"># multi_accept on;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三部分-http块"><a href="#第三部分-http块" class="headerlink" title="第三部分:http块"></a>第三部分:http块</h2><p>http块包括：http块和server块</p><p><strong>http块： 配置指令包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等。</strong> </p><p><strong>server块：</strong> </p><ol><li>全局server块：本虚拟机主机的监听配置和本虚拟机主机的名称或IP配置</li><li>location块：一个server块可以配置多个location块。主要作用是基于Nginx服务器接收到的请求字符串（例如server_name/uri-string)，<strong>对虚拟主机名称（也可以是IP别名）之外的字符串（例如前面的/uri-string)进行匹配，对特定的请求进行处理</strong>。<strong>地址定向、数据缓存和应答控制</strong>等功能，以及<strong>第三方模块的配置</strong>也在这里进行。</li></ol><h1 id="Nginx源码安装"><a href="#Nginx源码安装" class="headerlink" title="Nginx源码安装"></a>Nginx源码安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#CentOS 安装</span></span></span><br><span class="line">yum -y install gcc</span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line">wget http://nginx.org/download/nginx-1.9.9.tar.gz</span><br><span class="line">tar -zxvf  nginx-1.9.9.tar.gz</span><br><span class="line">cd nginx-1.9.9</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:如果连接不上，检查阿里云安全组是否开放端口，或者服务器防火墙是否开放端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启</span></span><br><span class="line">service firewalld start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">service firewalld restart</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">service firewalld stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看防火墙规则</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查询端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=8080/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开放80端口</span></span><br><span class="line">firewall-cmd --permanent --add-port=80/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">移除端口</span></span><br><span class="line">firewall-cmd --permanent --remove-port=8080/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙（修改配置后要重启防火墙)</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#参数解释</span></span></span><br><span class="line">firwall-cmd:是Linux提供的操作firewall的一个工具：</span><br><span class="line">    --permanent：表示设置为持久</span><br><span class="line">    --add-port：标识添加的端口</span><br></pre></td></tr></table></figure><h1 id="Nginx功能模块配置"><a href="#Nginx功能模块配置" class="headerlink" title="Nginx功能模块配置"></a>Nginx功能模块配置</h1><h2 id="反向代理-1"><a href="#反向代理-1" class="headerlink" title="反向代理"></a>反向代理</h2><h3 id="请求转发配置"><a href="#请求转发配置" class="headerlink" title="请求转发配置"></a>请求转发配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">  server_name: 192.168.17.219;</span><br><span class="line">  <span class="attribute">root</span> /home/project/DIANBoard/build;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8888;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Nginx反向代理，根据访问的路径跳转到不同端口的服务中，Nginx监听9001</p><p>访问<a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到127.0.0.1:8080</p><p>访问<a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到127.0.0.1:8081</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">9091</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  //允许cros跨域访问</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">   <span class="comment">#proxy_redirect default;</span></span><br><span class="line">      <span class="comment">#跟代理服务器连接的超时时间，必须留意这个time out时间不能超过75秒，当一台服务器当掉时，过10秒转发到另外一台服务器。</span></span><br><span class="line">   <span class="attribute">proxy_connect_timeout</span> <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">location</span> <span class="regexp">~ /edu/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="attribute">location</span> <span class="regexp">~ /vod/</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8081;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="location指令说明"><a href="#location指令说明" class="headerlink" title="location指令说明"></a>location指令说明</h4><p>用于匹配URL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~] uri &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>=：用于不含正则表达式的URI前，要求请求字符串与URI严格匹配，如果匹配成功，就停止继续向下搜索并立即处理该请求</li><li>~：用于表示URI包含正则表达式，并且区分大小写。</li><li>~*：用于表示URI包含正则表达式，并且不区分大小写</li><li>*~：用于不含正则表达式的URI前，要求Nginx服务器找到标识URI和请求字符串匹配度最高的location后，立即使用此location处理请求，而不再使用location块中的正则URI和请求字符串做匹配。</li></ol><p>*<em>注意：如果URI包含正则表达式，则必须要有~ 或者 ~<em>标识。</em></em></p><h2 id="负载均衡-1"><a href="#负载均衡-1" class="headerlink" title="负载均衡"></a><strong>负载均衡</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="attribute">upstream</span> myserver&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">121.199.76.44:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">121.199.76.44:8081</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  server&#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">7777</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">root</span> /myproject/build;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      ....</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://myserver;</span><br><span class="line">      <span class="attribute">proxy_connection_timeout</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。"><a href="#1-轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。" class="headerlink" title="1.轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。"></a>1.<strong>轮询</strong>（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</h4><h4 id="2-weight：weight代表权重默认为1，权重越高被分配的客户端越多。"><a href="#2-weight：weight代表权重默认为1，权重越高被分配的客户端越多。" class="headerlink" title="2.weight：weight代表权重默认为1，权重越高被分配的客户端越多。"></a>2.<strong>weight</strong>：weight代表权重默认为1，权重越高被分配的客户端越多。</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myserver&#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">121.199.76.44:8080</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">121.199.76.44:8081</span> weight=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="3-ip-hash：每个请求按访问IP的hash结果分配，这样每个请求固定访问一个后端服务器。可以解决session的问题。"><a href="#3-ip-hash：每个请求按访问IP的hash结果分配，这样每个请求固定访问一个后端服务器。可以解决session的问题。" class="headerlink" title="3.ip_hash：每个请求按访问IP的hash结果分配，这样每个请求固定访问一个后端服务器。可以解决session的问题。"></a>3.<strong>ip_hash</strong>：每个请求按访问IP的hash结果分配，这样每个请求固定访问一个后端服务器。可以解决session的问题。</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myserver&#123;</span><br><span class="line">        ip_hash;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">121.199.76.44:8080</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">121.199.76.44:8081</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。"><a href="#4-fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。" class="headerlink" title="4.fair（第三方）：按后端服务器的响应时间来分配请求，响应时间短的优先分配。"></a>4.<strong>fair（第三方）</strong>：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> myserver&#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">121.199.76.44</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">121.199.76.44</span>;</span><br><span class="line">  fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动静分离-1"><a href="#动静分离-1" class="headerlink" title="动静分离"></a>动静分离</h2><p>将动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用Nginx处理静态页面，Tomcat处理动态页面。</p><p>动静分离实现角度：</p><ul><li>纯粹把静态文件独立成单独的域名，放在独立的服务器上</li><li>动态和静态文件混合在一起发布，通过Nginx来分开。</li></ul><p>通过location指定不同的后缀名实现不同的请求转发。通过expires参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。</p><p>Expires：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用Expires来缓存），3d，表示3天之内访问这个URL，发送一个请求，比对服务器改文件最后更新时间没有变化，则不会从服务器抓取，返回状态码304， 如果有修改，则直接从服务器重新下载，返回状态码200。</p><p><img src="/Users/lushengyang/Desktop/LSY/document/image/%E6%88%AA%E5%9B%BE.png" alt="截图"></p><p>创建data目录，分别放data/a.html和image/1.jpeg</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /www/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /data/;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /image/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /data/;</span><br><span class="line">    <span class="attribute">autoindex</span> <span class="literal">on</span>; <span class="comment">#列出当前文件中的内容 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx限流"><a href="#Nginx限流" class="headerlink" title="Nginx限流"></a>Nginx限流</h2><h3 id="限制访问评率-正常流量"><a href="#限制访问评率-正常流量" class="headerlink" title="限制访问评率(正常流量)"></a><strong>限制访问评率(正常流量)</strong></h3><p>采用 ngx_http_limit_req_module模块来限制请求的访问频率，基于漏桶算法原理实现</p><p>使用 nginx limit_req_zone 和 limit_req 两个指令，限制单个IP的请求处理速率</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">limit_req_zone</span> $binary_remote_addr zone=serviceRateLimit:<span class="number">10m</span> rate=10r/s  //每秒最多处理<span class="number">10</span>个请求</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">limit_req</span> zone=servicelRateLimit;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://upstream_clusterl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>语法:limit_req_zone key zone rate</strong></p><ul><li><strong>key</strong>:定义限流对象,binary_remote_addr是一种key,表示基于remote_addr(客户端IP)来做限流,binary_的目的是压缩内存占用量</li><li><strong>zone</strong>:定义共享内存区来存储访问信息， myRateLimit:10m 表示一个大小为10M，名字为myRateLimit的内存区域。1M能存储16000 IP地址的访问信息，10M可以存储16W IP地址访问信息。</li><li><strong>rate</strong>:用于设置最大访问速率，rate=10r/s 表示每秒最多处理10个请求。Nginx 实际上以毫秒为粒度来跟踪请求信息，因此 10r/s 实际上是限制：每100毫秒处理一个请求。这意味着，自上一个请求处理完后，若后续100毫秒内又有请求到达，将拒绝处理该请求</li></ul><h3 id="限制并发连接数-突发流量"><a href="#限制并发连接数-突发流量" class="headerlink" title="限制并发连接数(突发流量)"></a><strong>限制并发连接数(突发流量)</strong></h3><p>按上面的配置在流量突然增大时，超出的请求将被拒绝，无法处理突发流量，那么在处理突发流量的时候，该怎么处理呢？Nginx提供了 burst 参数来解决突发流量的问题，并结合 nodelay 参数一起使用。burst 译为突发、爆发，表示在超过设定的处理速率后能额外处理的请求数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">limit_req_zone</span> $binary_remote_addr zone=serviceRateLimit:<span class="number">10m</span> rate=10r/s  //每秒最多处理<span class="number">10</span>个请求</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">limit_req</span> zone=servicelRateLimit burst=<span class="number">20</span> nodelay;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://upstream_clusterl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>burst=20 nodelay表示这20个请求立马处理，不能延迟，相当于特事特办。不过，即使这20个突发请求立马处理结束，后续来了请求也不会立马处理。burst=20 相当于缓存队列中占了20个坑，即使请求被处理了，这20个位置这只能按 100ms一个来释放。这就达到了速率稳定，但突然流量也能正常处理的效果。</p><h3 id="限制并发连接数"><a href="#限制并发连接数" class="headerlink" title="限制并发连接数"></a><strong>限制并发连接数</strong></h3><p>ngx_http_limit_conn_module模块提供了对资源连接数进行限制的功能，使用 limit_conn_zone 和 limit_conn 两个指令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=perip:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> $server_name zone=perserver:<span class="number">10m</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">limit_conn</span> perip <span class="number">20</span>;     //限制单个IP同时最多能持有10连接</span><br><span class="line">    <span class="attribute">limit_conn</span> perserver <span class="number">100</span>; //限制server的最大连接数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>limit_conn perip 20：对应的key是 $binary_remote_addr，表示限制单个IP同时最多能持有20个连接。</li><li>limit_conn perserver 100：对应的key是 $server_name，表示虚拟主机(server) 同时能处理并发连接的总数。注意，只有当 request header 被后端server处理后，这个连接才进行计数。</li></ul><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="1、浏览器缓存-静态资源缓存用expire"><a href="#1、浏览器缓存-静态资源缓存用expire" class="headerlink" title="1、浏览器缓存,静态资源缓存用expire"></a><strong>1、浏览器缓存,静态资源缓存用expire</strong></h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm)$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ .*\.(?:js|css)$</span> &#123;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、代理层缓存"><a href="#2、代理层缓存" class="headerlink" title="2、代理层缓存"></a>2、代理层缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /data/cache/nginx/ levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=cache:<span class="number">512m</span> inactive = <span class="number">1d</span> max_size=<span class="number">8g</span>;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.(htm|html)?$</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_cache</span> cache;</span><br><span class="line">        <span class="attribute">proxy_cache_key</span> $uri$is_args$args;    //以此变量值做HASH,作为<span class="attribute">KEY</span></span><br><span class="line">        add_header X-Cache $upstream_cache_status;</span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://real_server;</span><br><span class="line">       <span class="attribute">proxy_redirect</span> <span class="literal">off</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ .*\.(gif|jpg|jpeg|bmp|png|ico|txt|js|css)<span class="variable">$&#123;</span></span></span><br><span class="line"><span class="variable"><span class="regexp">        root /data/webapps/edc;</span></span></span><br><span class="line"><span class="variable"><span class="regexp">        expires 3d;</span></span></span><br><span class="line"><span class="variable"><span class="regexp">        add_header Static Nginx-Proxy;</span></span></span><br><span class="line"><span class="variable"><span class="regexp">    &#125;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="黑白名单"><a href="#黑白名单" class="headerlink" title="黑白名单"></a>黑白名单</h2><h3 id="1、不限流白名单"><a href="#1、不限流白名单" class="headerlink" title="1、不限流白名单"></a>1、不限流白名单</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">geo</span> $limit &#123;</span><br><span class="line">    122.16.11.0/24 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">map</span> $limit $limit_key&#123;</span><br><span class="line">    1 $binary_remote_addr;</span><br><span class="line">    0 &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">limit_req_zone</span> $limit_key zone=mylimit:<span class="number">10m</span> rate=1r/s;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">limit_req</span> zone=mylimit burst=<span class="number">1</span> nodelay;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://serveic3Cluster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、黑名单"><a href="#2、黑名单" class="headerlink" title="2、黑名单"></a>2、黑名单</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">10.52.119.21</span>;</span><br><span class="line">    <span class="attribute">deny</span> <span class="number">11.12.123.1</span>/<span class="number">24</span>;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">10.1.1.0</span>/<span class="number">16</span>;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">1001</span>:0dby::/<span class="number">32</span>;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx配置高可用的集群"><a href="#Nginx配置高可用的集群" class="headerlink" title="Nginx配置高可用的集群"></a><strong>Nginx配置高可用的集群</strong></h2><p><img src="http://qiliu.luxiaobai.cn/img/%E9%AB%98%E5%8F%AF%E7%94%A8nginx%E9%9B%86%E7%BE%A4.png" alt="高可用nginx集群"></p><p><strong>Keepalived</strong></p><ul><li>工作原理：vrrp协议实现</li><li>工作方式：抢占式和非抢占式</li></ul><p>高可用：两台业务系统启动相同服务，如果有一台宕机，另一台自动接管，即高可用</p><p>安装配置keepalived：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#两条服务器安装</span></span><br><span class="line"><span class="attribute">yum</span> install keepalived -y</span><br><span class="line"></span><br><span class="line"><span class="comment">##Ubuntu 安装keepalived</span></span><br><span class="line">sudo apt-get install libssl-dev</span><br><span class="line">sudo apt-get install openssl</span><br><span class="line">sudo apt-get install libpopt-dev</span><br><span class="line">sudo apt-get install keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置keepalived.conf</span></span><br><span class="line">sudo vim /etc/keepalived/keepalived.conf</span><br><span class="line">global_defs &#123;   <span class="comment">#全局定义</span></span><br><span class="line">    <span class="section">notifaction_email</span> &#123;</span><br><span class="line">        1575018859@qq.<span class="attribute">com</span></span><br><span class="line">    &#125;</span><br><span class="line">    notification_email_from sns-lvs@gmail.com</span><br><span class="line">    smtp_server smtp.hysec.com</span><br><span class="line">    smtp_connection_timeout <span class="number">30</span></span><br><span class="line">    router_id nginx_master         <span class="comment">#设置Nginx master的ID，在一个网络应该是唯一的,访问到主机</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">    <span class="attribute">script</span> <span class="string">&quot;/usr/local/src/check_nginx_pid.sh&quot;</span>   <span class="comment">##最后手动执行下次脚本，以确保此脚本能够正常执行</span></span><br><span class="line">    interval <span class="number">2</span>                                <span class="comment">##(检测脚本执行的间隔，单位是秒)</span></span><br><span class="line">    weight <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="attribute">state</span> MASTER              <span class="comment">#指定keepalived的角色，MASTER为主，BACKUP为备</span></span><br><span class="line">    interface eth0           <span class="comment">#当前进行vrrp通讯的网络接口卡（当前centos的网卡),使用 ifconfig查看</span></span><br><span class="line">    virtual_router_id <span class="number">66</span>         <span class="comment">#虚拟路由编号，主从要一致</span></span><br><span class="line">    priority  <span class="number">100</span>             <span class="comment">#优先级，数值越大，获取处理请求的优先级越高</span></span><br><span class="line">    advert_int  <span class="number">1</span>               <span class="comment">#检查间隔，默认为ls（vrrp组播周期秒数)</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        <span class="attribute">auth_type</span> PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">    track_script&#123;</span><br><span class="line">        <span class="attribute">chk_http_port</span>           <span class="comment">#调用检测脚本</span></span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        121.199.76.44              <span class="comment">##定义虚拟IP（VIP），可多设，每行一个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##创建Nginx服务监控脚本/usr/local/nginx/check_nginx.sh（主从服务器一致）</span></span><br><span class="line"><span class="attribute">sudo</span> vim /usr/local/src/check_nginx_pid.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">A=`ps -C nginx --<span class="literal">no</span>-header |wc -l`</span><br><span class="line">if [ $A -eq <span class="number">0</span> ];<span class="attribute">then</span></span><br><span class="line">    <span class="comment">#/usr/local/nginx/sbin/nginx            #重启Nginx</span></span><br><span class="line">    sudo service nginx restart</span><br><span class="line">    if [ `ps -C nginx --<span class="literal">no</span>-header | wc -l` -eq <span class="number">0</span>];<span class="attribute">then</span>  <span class="comment">#Nginx重启失败，则停掉keepalived服务</span></span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi  </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line"> <span class="comment">###另外检测脚本</span></span><br><span class="line"> <span class="comment">#!/bin/sh</span></span><br><span class="line"> nginxpid=$(ps -C nginx --<span class="literal">no</span>-header|wc -l)</span><br><span class="line"> <span class="comment">#1.判断Nginx是否存活，如果不存活则尝试启动Nginx</span></span><br><span class="line"> if [$nginxpid -eq <span class="number">0</span> ];<span class="attribute">then</span></span><br><span class="line">     systemctl start nginx</span><br><span class="line">     sleep <span class="number">3</span></span><br><span class="line">     <span class="comment">#2.等待3秒后再次获取一次Nginx状态</span></span><br><span class="line">     nginxpid=$(ps -C nginx --<span class="literal">no</span>-header|wc -l)</span><br><span class="line">     <span class="comment">#3.再次进行判断,如Nginx还不存活则停止keepalived,让地址进行漂移,并退出脚本</span></span><br><span class="line">     if[$nginxpid -eq <span class="number">0</span>];<span class="attribute">then</span></span><br><span class="line">         systemctl stop keepalived</span><br><span class="line">     fi</span><br><span class="line"> fi  </span><br></pre></td></tr></table></figure><p>日志存放位置：/var/log/messages</p><p>程序目录：/etc/keepalived/keepalivd.conf</p><p> 启动nginx和keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived.service</span><br></pre></td></tr></table></figure><p>一个master和多个worker的好处</p><ol><li>可以使用nginx  -s reload 热部署,利用nginx进行热部署操作</li><li>每个worker是独立的进程,如果有其中的一个worker出现问题,其他worker独立的,继续进行争抢,实现请求过程,不会造成服务中断 </li><li>设置多少个worker ?worker数和服务器的cpu数相等时最为适宜的 </li></ol><p><strong>连接数worker_connection</strong></p><p>发送请求,占有worker的几个连接数:2个(静态)或者4个(动态)</p><p>nginx有一个master,  有4个worker,每个worker支持最大的连接数据1024,支持的最大并发数多少?</p><p>##普通的静态访问最大并发数是:worker_connections * worker_processes / 2,</p><p>##而如果是http作为反向代理,最大并发数:worker_connections * worker_processes / 4</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title: Nginx全面了解如何配置&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;h2 id=&quot;Nginx&quot;&gt;&lt;a href</summary>
      
    
    
    
    
  </entry>
  
</feed>
